const pushover = require("../pushover/pushover);
const mqtt = require("../mqtt/mqtt");
const log = require('../log/log')("ping")

var ping = require("ping");


// const hostlist =  [
//   RaspberryPi: "192.168.178.27",
//   FreeNas: "192.168.178.48",
//   DockerHost: "192.168.178.59",
//   Homy: "192.168.178.73"
// ]

const initialData = {
  servers: [
    {
      ip: '192.168.178.27',
      hostname: 'RaspberryPi',
      online: null,
    },
    {
      ip: '192.168.178.48',
      hostname: 'FreeNas',
      online: null,
    },
    {
      ip: '192.168.178.59',
      hostname: 'DockerHost',
      online: null,
    },
    {
      ip: '192.168.178.73',
      hostname: 'Homy',
      online: null,
    },
  ],
  lastUpdate: null
}


const hostArray = Object.entries(hostlist);

async function Ping() {
  for (const [hostname, hostAddress] of hostArray) {
    let res = await ping.promise.probe(hostAddress,{timeout: 10});
    if (res.alive == false) {
      pushover.sendCritical("Statusmitteilung", `Das Gerät ${hostname} ist nicht erreichbar!`);
    } 
    console.log(`${hostname} ist online`)
    mqtt.sendMsg(`jarvis/modules/ping/${hostname}/status/alive`, res.alive);
    mqtt.sendMsg(`jarvis/modules/ping/${hostname}/status/ping`, Number(res.max));
    mqtt.sendMsg(`jarvis/modules/ping/${hostname}/status/packetLoss`, Number(res.packetLoss));
  }
}

setInterval(test, 900000); // 900000ms = 15 min




log.debug("Modules was loaded")


async function test() {
  hostlist.servers.forEach(ip => {
    let res = await ping.promise.probe(ip,{timeout: 10});
    if (res.alive == false) {
      pushover.sendCritical("Statusmitteilung", `Das Gerät ${hostname} ist nicht erreichbar!`);
    } 
    console.log(`${hostname} ist online`) 
  });
  
}






// async function refresh() {
//   let data = initialData
// 
//   for (let server of data.servers) {
//     let request = new Request(server.url)
//     request.method = 'GET'
//     try {
//       await request.load()
//       server.online = request.response.statusCode
//     } catch (response) {
//       server.online = 0
//     }
//   }